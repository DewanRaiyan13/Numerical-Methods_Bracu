# -*- coding: utf-8 -*-
"""Lab 01 Introduction to Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XP2Wx7pggn7C_HVV-AC8sdxEGO-yviaJ

#Introduction to Python

# Variables and Data Types
* Variables are dynammically typed. No need to write data type while declaring a variable.
"""

#Declaring variables

a = 123           #integer
b = 1.23          #float
c = 1 + 2j        #complex
d = "Hello World" #string
e = True          #boolean true
f =  False        #boolean false

#Printing the variables

print (a)
print (b)
print (c)         #Bracket for complex number
print (d)
print (e)

#Checking types

type(c)

#Basic arithmetic operations

print (5 + 2)
print (5 - 2)
print (5 * 2)
print (5 / 2)
print (5 % 2)     #Mod operator. Returns remainder
print (2 ** 4)    #Power

print (5 / 3)
print (5 // 3)    #Returns only the Integer part

print ("The current value of a is", a)            #Concatenated using comma
print ("The current value of a is", a, "and b is", b)

print ("The current value of a is", a)            #Default blank space
print ("The current value of a is", a, sep = '\t')  #Customize using separator

print ("The current value of a is", a)          #Auto newline added. If we don't need any newline, keep it blank
print ("The current value of a is", a, end = "\n\n")
print ("Hello")

"""# String"""

#String Concatenation
x = "Hi!"
y = "  My name is Mrittika  "
z = x + y
print (z)

#Accessing String with character position number. Space is also a character
print (y[0])
print (y[5])

#Length of the String
print (len(x))

#Acsessing Last Character
print (y[len(y)-1])
print(y[-1])

#Common String Methods
s = "My name is Mrittika"

print (y.upper())   #All uppercase
print (y.lower())   #All lowercase
print (y.title())   #Title case - Every word first letter uppercase

s = "   My name is Mrittika"
print (y.strip())   #Strips spaces from starting or ending positions
print (y.strip().title())   #Combination of multiple methods - works sequentially

s = "My name is Mrittika"
print (y.find("is"))    #Returns 1st letter of the intended word
print (y.find("hello")) #Not in the string
print (y.find ("a"))    #Returns 1st appearence position of the intended letter

#Membership Operator. Returns Boolean
"Mrittika" in s

#Replace method
m = "My name is Anika"
m_new = m.replace("Anika", "Mrittika")
print (m_new)

#String Slicing
s = "I love watching football!"

#m[a:b] -> Return from index a up until index b (b not included)
print (s[0:5])

print (s[:5])
print (s[5:])

print (s[-4:])

"""# User Input"""

username = input("Enter username:")
print("Username is: " + username)

num = int(input("Enter number:"))  #Take user input as string. Need to type cast to use the numbers
print (num * 2)

"""# Conditional Statements"""

x = 5
y = 6

if x > y:
  print("Maximum is x")
else:
  print ("Maximum is y")

#elif
x = 5
y = 5

if x > y:
  print("Maximum is x")
elif x == y:
  print ("x and y are equal")
else:
  print ("Maximum is y")

#and - Both conditions need to be True
a = 200
b = 10
c = 500
if a > b and c > a:
  print("Both conditions are True")
else:
  print("Negative!!")

#or - Either one of the conditions = True should be enough
a = 200
b = 10
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")
else:
  print("Negative!!")

#Nested if
x = 50

if x > 10:
  #print("Above ten!")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 20!")
else:
  print("Not even above ten!")

#pass statement - Can not leave any block blank. Use pass

a = 10
b = 20

if b > a:
  pass

"""# Python Built-in Data Types

#List
* Similar to Java or C array
* Collection of elements of multiple data types
* Allows easy modification of data
* Requires more memory to store additional information about data types of each element
"""

#Initializing
list = [1, 2, 3, 4, 5]
print(list)

mixed_list = [1, 2.5, "hello", [1, 2, 3]]
print(mixed_list[3])

#List Methods
print(len(list))
print(4 in list)    #Search

list[2] = "New"     #Update value
print(list)

list.append("World")    #Add new element
print(list)

list.remove("New")    #Remove element
print(list)
list.pop(1)           #Remove using index
print(list)

list2 = [16, 55]
joined_list = list + list2
print(joined_list)

my_list = ['a', 'b', 'c', 'd', 'e', 'f']

#List Slicing

print (my_list[3])
print (my_list[1:3])
print (my_list[:3])
print (my_list[3:])
print (my_list[-3:])

print (my_list[0:4:2])      #index+2 everytime
print (my_list[:])          #All elements
print (my_list[::2])
print (my_list[::-1])       #Reverse order

#Print last 4 elements in reverse
my_list = ['a', 'b', 'c', 'd', 'e', 'f']

print (my_list[-1:-5:-1])

#print 2nd to 5th element reverse order
print (my_list[4:0:-1])

#Matrix [List of list] using list
matrix = [[1, 2, 3, 4],
          [5, 6, 7, 8]]

# |1 2 3 4|
# |5 6 7 8|

print (matrix[1][2])

"""# Tuple
* Immutable - Items can not be modified
* Collection of elements of multiple data types
"""

tuple = (1, 2, 3, 4, 5)
tuple[0]

tuple[1] = "hello"

"""#Set
* Immutable - Items can not be modified
* Unordered - No index
* No duplicates allowed
"""

set = {"apple", "banana", "cherry", "banana"}
print(set)

set.add("orange")
print(set)

set.remove("banana")
print(set)

"""# Dictionary
* Values stored as key:value pair
* Mutable
* Key can be of any types but can not be a duplicate value
"""

cricketers = {
    75: "Shakib",
    2: "Mashrafee",
    28: "Tamim",
    "Extra": "Riad"
}

print(cricketers)

print(cricketers["Extra"])      #Accessing elements

cricketers["Extra"] = "Mahmudullah"
print(cricketers)

cricketers.update({15:"Mushfiq"})
print(cricketers)

cricketers.pop("Extra")
print(cricketers)

"""# Loops
* 2 types - while loop and for loop
"""

#while loop
i = 0
while i < 10:
    print(i)
    i = i + 1

#for loop
for i in range(0, 10, 2):
  print(i)

# Iterate over the list
list = ['a', 'b', 'c', 'd', 'e']

for i in list:
  print (i)

# Program to iterate through a list using indexing
list = ['a', 'b', 'c', 'd', 'e']

# iterate over the list using index
for i in range(0, len(list)):
    print("index =", i, "value =", list[i])

#break statement - Out of the loop
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

#continue statement - Stop the current iteration of the loop and continue with the next
fruits = ["apple", "banana", "cherry"]
for i in fruits:
  if i == "banana":
    continue
    print("asbndjkas")
  print(i)

#Nested loop
num_list = [1, 2, 3]
alphabet_list = ['a', 'b', 'c']

for number in num_list:
    print(number)
    for letter in alphabet_list:
        print(letter)

"""# Functions"""

def hello_function():
  print("Hello")

hello_function()      #Global Scope

#With parameter
def name_function(fname, lname):
  print(fname, " ", lname)

name_function("Anika", "Mrittika")

#With return statement
def sum_numbers(number1, number2):
  result = number1+number2
  return result

x = sum_numbers(2, 3)
print (x)

#Default Parameter Value
def increment(number, by=1):
    return number + by

print(increment(2))
print(increment(2, 2))

# Keyword arguments
print(increment(by=1, number=2))

#If the number of arguments is unknown, add a * before the parameter name. Stored as a Tuple
def print_student_list(*kids):
  for x in kids:
    print (x)

print_student_list("Emil", "Tobias", "Linus")

"""# Numpy
* A Python library
* Used for working with arrays
* Short form of "Numerical Python"
* Aims to provide an array object that is up to 50x faster than traditional Python lists
* Provides a lot of supporting functions
"""

import numpy as np

arr = np.array([[1 , 2, 3, 2.45, "hello"],[1,2,3,4,5]])
arr1 = np.array([1 , 2, 3, 2.45, "hello"])
print(arr)

print(type(arr))

print(len(arr))
print(arr.shape)
print(arr1.shape)    #row, column

#Append
x = np.array([1, 2, 3, 4, 5])
y = np.append(x, [50, 70])
print(y)
print(x)    #No change in main array

#Delete
x = np.array([1, 2, 3, 4, 5])
y = np.delete(x, 2)   #Delete using index
print(x)
print(y)

#Sorting
x = np.array([7, 8, 3, 10, 5])
sorted_x = np.sort(x)
print(sorted_x)     #Ascending
print(sorted_x[3:1:-1])   #Descending - Reverse the Ascending order sorted array

arr_2d = np.array([[1, 2, 3], [4, 5, 6]])
print(arr_2d)

print(len(arr_2d))
print(arr_2d.shape)     #row, column
print(arr_2d.ndim)      #Dimension

#indexing
arr = np.array([1, 2, 3, 4])

print(arr[0])     #1st element
print(arr[-1])    #Last element

arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
print(arr)

print('5th element on 2nd row: ', arr[1, 4])

#Slicing
arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[4:])
print(arr[:4])
print(arr[-3:-1])
print(arr[1:5:2])

#Slicing 2-D Arrays
arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

#From the second row, slice elements from index 1 to index 4 (not included)
print(arr[1, 1:4])

#From both rows, slice index 1 to index 4 (not included)
print(arr[0:2, 1:4])

arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print (arr)

print(arr[:, 0])
print(arr[:, 1])    #column
print(arr[0, :])    #row

#zero matrix
x = np.zeros(2,dtype = int)
print(x)

y = np.zeros((4,2))     #row, column
print(y)

a = np.array([3, 4, 5])
b = np.array([[1,2,3],[4,5,6]])

print(np.sum(a))      #Summation of all elements
print(np.prod(a))     #Product of all elements

print(np.sum(b))
print(b)
print(np.sum(b, axis=0))      #Column-wise
print(np.sum(b, axis=1))      #Row-wise

#Logical indexing - Identify which elements fulfill the constraint
b = np.array([[1,2,3],[4,5,6]])
print(b > 2)

print(b[ b > 2 ])       #Extract the elements that fulfill the constraint

b[ b > 2 ] = 100      #Replace where the constraints are fulfilled
print(b)

#Iterating
arr = np.array([1, 2, 3])
for x in arr:
  print(x)

#Print row by row
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
  print(x)

#Print element by element
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
  for y in x:
    print(y)

#linspace - Create a random array, same difference between the numbers
x = np.linspace(1, 101, 5)     #start, end, how many numbers
print(x)

x = np.linspace(0, 10, 8)     #No 8 integer values of same difference between 0 - 10
print(x)

#Element wise operation - same operation on every element at a time

print(x + 10)

y = np.array([1, 2, 3, 4])
z = np.array([10, 10, 20, 30])

print(y ** 2)
print(2*y + z)

"""# Pandas
* A Python library
* Used to analyze and manipulate data

# Data Analysis
"""

import pandas as pd

data = {
  "Name": ['Arif', 'Nafis', 'Hasan'],
  "Age": [35, 30, 40]
}

#load data into a DataFrame [Formated data; 2 Dimensional Data Structure]
df = pd.DataFrame(data)

print(df)

#loc attribute - accessing the dataframe values
print(df.loc[0])
print(df.loc[1])

#Read csv
df = pd.read_csv('/content/sample_data/lab1_data.csv')
print (df)          #Show first 5 and last 5 entries

print (df.to_string())        #Show all entries

#Analyzing data
print(df.head())        #Show first N entries

print(df.tail())          #Show last 5 entries

print(df.info())          #Information summary of all datas

print(df.describe())        #More detailed information of all datas

#Information of a specific column
print(df["Calories"].mean())
print(df["Calories"].median())
print(df["Calories"].mode())

"""#Data Cleaning"""

#Drop rows with empty cells. Return a new Data Frame.
new_df = df.dropna()
print(new_df.to_string())

#Replace NULL values with the mean value = 375
df.fillna(375, inplace = True)        #Inplace - Changes saved in the same Dataframe
print(df.to_string())

#Replace in a specific column
df["Calories"].fillna(375, inplace = True)

#Update data
df.loc[165, 'Duration'] = 45
print(df.to_string())

#Duplicate data finding
print(df.duplicated().to_string())      #False - Unique, True - Duplicate values

#Drop duplicate data
df.drop_duplicates(inplace = True)
print(df.duplicated().to_string())

#correlation
df.corr()       # 0 - No relation, 1 - Strongly correlated, -1 - Strongly correlated but adversely

"""#Data Visualisation"""

#plot data
df.plot()

#Customise to make it more understandable
df.plot(kind = 'scatter', x = 'Duration', y = 'Calories')

df.plot(kind = 'scatter', x = 'Duration', y = 'Maxpulse')

df["Duration"].plot(kind = 'hist')