# -*- coding: utf-8 -*-
"""Md.Raiyan Uddin_12_Lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FgCrgES8cOkcnTCmBeGeB2ivFES8wTG-

Make sure you remove `raise NotImplementedError()` and fill in any place that says `# YOUR CODE HERE`, as well as your `NAME`, `ID`, and `LAB_SECTION` below:
"""

NAME = "Md. Raiyan Uddin"
ID = "21301613"
SECTION = "12"

"""# Part 1: Solving a linear system using inverse matrix

We have a linear system

\begin{align}
&a_{11} x_1 + a_{12} x_2 +  \cdots  + a_{1n} x_n = b_1\\
&a_{21} x_1 + a_{22} x_2 +  \cdots + a_{2n} x_n = b_2\\
&\cdots\\
&a_{n1} x_1 + a_{n2} x_2 +  \cdots + a_{nn} x_n = b_n\\
\end{align}

It is convenient to express this system in the
matrix form

\begin{align}
Ax = b
\end{align}

where $A$ is an $n \times n$ square matrix with elements $a_{ij}$, and $x$, $b$ are $n \times 1$ vectors.

We have to keep in mind that this system will have a unique solution iff $A$ is non-singular, given by $x = A^{-1}b.$
"""

import matplotlib.pyplot as plt
import numpy as np
import sys

def get_result_by_inverse_matrix(A, b):
  # A and b are numpy arrays

  # first check if the A is non-singular matrix. We know that the determinant of
  # a non-singular matrix will be non-zero


  # YOUR CODE HERE
  #raise NotImplementedError()
  inverse = None
  if(np.linalg.det(A)==0):
    print("singular matrix")
  else:
     inverse = np.linalg.inv(A)

  x = np.dot(inverse, b)
  # # HINT:
  # You may find functions such as linalg.det(), linalg.inv, etc. of the numpy package useful
  return x

# Test case for the get_result_by_inverse_matrix(A, b) function.

data_A = np.array([[1, 2, 1], [1, -2, 2], [2, 12, -2]])
data_b = np.array([0,4,4])

test = get_result_by_inverse_matrix(data_A, data_b)
results = [11, -2.5, -6]

np.testing.assert_array_equal(test, results)
print(test)

"""# Part 2: Gaussian elimination

Gaussian elimination uses elementary row operations to transform the system to upper triangular form $Ux = y$.

Elementary row operations include swapping rows and adding multiples of one rowto another.
They won‚Äôt change the solution $x$, but will change the matrix $A$ and the right-hand side $b$.

The upper triangular matrix, $ùëà$, is defined as

\begin{bmatrix}
u_{11} & u_{12} & \cdots & u_{1n}\\
0 & u_{22} & \cdots & u_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
0 & \cdots & 0 & u_{nn}\\
\end{bmatrix}

**Algorithm of Gaussian elimination**

Let $A^{(1)}=A$ and $b^{(1)}=b$. Then for each k from 1 to $n-1$, compute a new matrix $A^{(k+1)}$ and right-hand side $b^{(k+1)}$ by the following procedure:


1.   Define the row multipliers

\begin{align}
m_{ij} = \frac{a_{ik}^{(k)}}{a_{kk}^{(k)}}, i=k+1,\cdot \cdot \cdot,n.
\end{align}
2.   Use these to remove the unknown $x_k$ from equations $k + 1$ to $n$, leaving

\begin{align}
a_{ij}^{(k+1)}=a_{ij}^{(k)}-m_{ik}a_{kj}^{(k)}, b_{i}^{(k+1)}=b_{i}^{(k)}-m_{ik}b_{k}^{(k)}, i,j=k+1,\cdot \cdot \cdot, n.
\end{align}

It is helpful to combine these matrices to form an Augmented matrix (matrix $ùëè$ is the fourth column). We will perform this row operations on the Augmented matrix. It takes care of both $ùê¥$ and $ùëè$ matrixes at the same time.

After generating the upper triangular matrix, we have to apply **backward substitution method**.
For any $n \times n$ upper triangular system, $Ux = b$, the solution is:

\begin{align}
x_j = \frac{b_j-\sum_{k=j+1}^{n}u_{jk}x_k}{u_{jj}}, j = n, n-1, \cdot\cdot\cdot, 1.
\end{align}

Here we assumed that $detùëà‚â†0$.
"""

def get_result_gaussian_elimination(n, A):
  # n is the number of unknowns
  # A is the Augmented n x n+1 matrix. (numpy array)


  # Making numpy array of n size and initializing
  # to zero for storing solution vector
  x = np.zeros(n)


  # YOUR CODE HERE
  a = A
  # Applying Gauss Elimination
  for i in range(n):
      if a[i][i] == 0.0:
          sys.exit('Solution does not exist')

      for j in range(i+1, n):
          ratio = a[j][i]/a[i][i]

          for k in range(n+1):
              a[j][k] = a[j][k] - ratio * a[i][k]

  # Back Substitution
  x[n-1] = a[n-1][n]/a[n-1][n-1]

  for i in range(n-2,-1,-1):
      x[i] = a[i][n]

      for j in range(i+1,n):
          x[i] = x[i] - a[i][j]*x[j]

      x[i] = x[i]/a[i][i]
  #raise NotImplementedError()

  # HINT:
  # 1. Apply Gauss Elimination
  # 2. Apply Back Substitution

  return x

# Test case for the get_result_gaussian_elimination(n, A) function.

data_n = 3
data_A = np.array([[1, 2, 1, 0], [1, -2, 2, 4], [2, 12, -2, 4]])

test = get_result_gaussian_elimination(data_n, data_A)
results = [11, -2.5, -6]
np.testing.assert_array_equal(test, results)
#print(test)